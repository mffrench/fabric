// Code generated by protoc-gen-go.
// source: peer/chaincode_shim.proto
// DO NOT EDIT!

package peer

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf1 "github.com/golang/protobuf/ptypes/timestamp"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type ChaincodeMessage_Type int32

const (
	ChaincodeMessage_UNDEFINED                    ChaincodeMessage_Type = 0
	ChaincodeMessage_REGISTER                     ChaincodeMessage_Type = 1
	ChaincodeMessage_REGISTERED                   ChaincodeMessage_Type = 2
	ChaincodeMessage_INIT                         ChaincodeMessage_Type = 3
	ChaincodeMessage_READY                        ChaincodeMessage_Type = 4
	ChaincodeMessage_TRANSACTION                  ChaincodeMessage_Type = 5
	ChaincodeMessage_COMPLETED                    ChaincodeMessage_Type = 6
	ChaincodeMessage_ERROR                        ChaincodeMessage_Type = 7
	ChaincodeMessage_GET_STATE                    ChaincodeMessage_Type = 8
	ChaincodeMessage_PUT_STATE                    ChaincodeMessage_Type = 9
	ChaincodeMessage_DEL_STATE                    ChaincodeMessage_Type = 10
	ChaincodeMessage_INVOKE_CHAINCODE             ChaincodeMessage_Type = 11
	ChaincodeMessage_GET_K_STATE_BY_MULTIPLE_KEYS ChaincodeMessage_Type = 12
	ChaincodeMessage_RESPONSE                     ChaincodeMessage_Type = 13
	ChaincodeMessage_GET_STATE_BY_RANGE           ChaincodeMessage_Type = 14
	ChaincodeMessage_GET_QUERY_RESULT             ChaincodeMessage_Type = 15
	ChaincodeMessage_QUERY_STATE_NEXT             ChaincodeMessage_Type = 16
	ChaincodeMessage_QUERY_STATE_CLOSE            ChaincodeMessage_Type = 17
	ChaincodeMessage_KEEPALIVE                    ChaincodeMessage_Type = 18
	ChaincodeMessage_GET_HISTORY_FOR_KEY          ChaincodeMessage_Type = 19
)

var ChaincodeMessage_Type_name = map[int32]string{
	0:  "UNDEFINED",
	1:  "REGISTER",
	2:  "REGISTERED",
	3:  "INIT",
	4:  "READY",
	5:  "TRANSACTION",
	6:  "COMPLETED",
	7:  "ERROR",
	8:  "GET_STATE",
	9:  "PUT_STATE",
	10: "DEL_STATE",
	11: "INVOKE_CHAINCODE",
	12: "GET_K_STATE_BY_MULTIPLE_KEYS",
	13: "RESPONSE",
	14: "GET_STATE_BY_RANGE",
	15: "GET_QUERY_RESULT",
	16: "QUERY_STATE_NEXT",
	17: "QUERY_STATE_CLOSE",
	18: "KEEPALIVE",
	19: "GET_HISTORY_FOR_KEY",
}
var ChaincodeMessage_Type_value = map[string]int32{
	"UNDEFINED":                    0,
	"REGISTER":                     1,
	"REGISTERED":                   2,
	"INIT":                         3,
	"READY":                        4,
	"TRANSACTION":                  5,
	"COMPLETED":                    6,
	"ERROR":                        7,
	"GET_STATE":                    8,
	"PUT_STATE":                    9,
	"DEL_STATE":                    10,
	"INVOKE_CHAINCODE":             11,
	"GET_K_STATE_BY_MULTIPLE_KEYS": 12,
	"RESPONSE":                     13,
	"GET_STATE_BY_RANGE":           14,
	"GET_QUERY_RESULT":             15,
	"QUERY_STATE_NEXT":             16,
	"QUERY_STATE_CLOSE":            17,
	"KEEPALIVE":                    18,
	"GET_HISTORY_FOR_KEY":          19,
}

func (x ChaincodeMessage_Type) String() string {
	return proto.EnumName(ChaincodeMessage_Type_name, int32(x))
}
func (ChaincodeMessage_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptor3, []int{0, 0} }

type ChaincodeMessage struct {
	Type      ChaincodeMessage_Type       `protobuf:"varint,1,opt,name=type,enum=protos.ChaincodeMessage_Type" json:"type,omitempty"`
	Timestamp *google_protobuf1.Timestamp `protobuf:"bytes,2,opt,name=timestamp" json:"timestamp,omitempty"`
	Payload   []byte                      `protobuf:"bytes,3,opt,name=payload,proto3" json:"payload,omitempty"`
	Txid      string                      `protobuf:"bytes,4,opt,name=txid" json:"txid,omitempty"`
	Proposal  *SignedProposal             `protobuf:"bytes,5,opt,name=proposal" json:"proposal,omitempty"`
	// event emmited by chaincode. Used only with Init or Invoke.
	// This event is then stored (currently)
	// with Block.NonHashData.TransactionResult
	ChaincodeEvent *ChaincodeEvent `protobuf:"bytes,6,opt,name=chaincode_event,json=chaincodeEvent" json:"chaincode_event,omitempty"`
}

func (m *ChaincodeMessage) Reset()                    { *m = ChaincodeMessage{} }
func (m *ChaincodeMessage) String() string            { return proto.CompactTextString(m) }
func (*ChaincodeMessage) ProtoMessage()               {}
func (*ChaincodeMessage) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{0} }

func (m *ChaincodeMessage) GetTimestamp() *google_protobuf1.Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

func (m *ChaincodeMessage) GetProposal() *SignedProposal {
	if m != nil {
		return m.Proposal
	}
	return nil
}

func (m *ChaincodeMessage) GetChaincodeEvent() *ChaincodeEvent {
	if m != nil {
		return m.ChaincodeEvent
	}
	return nil
}

type PutStateInfo struct {
	Key   string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Value []byte `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *PutStateInfo) Reset()                    { *m = PutStateInfo{} }
func (m *PutStateInfo) String() string            { return proto.CompactTextString(m) }
func (*PutStateInfo) ProtoMessage()               {}
func (*PutStateInfo) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{1} }

type GetKStateByMultipleKeysResponse struct {
	KeyStates map[string][]byte `protobuf:"bytes,1,rep,name=keyStates" json:"keyStates,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *GetKStateByMultipleKeysResponse) Reset()                    { *m = GetKStateByMultipleKeysResponse{} }
func (m *GetKStateByMultipleKeysResponse) String() string            { return proto.CompactTextString(m) }
func (*GetKStateByMultipleKeysResponse) ProtoMessage()               {}
func (*GetKStateByMultipleKeysResponse) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{2} }

func (m *GetKStateByMultipleKeysResponse) GetKeyStates() map[string][]byte {
	if m != nil {
		return m.KeyStates
	}
	return nil
}

type GetStateByRange struct {
	StartKey string `protobuf:"bytes,1,opt,name=startKey" json:"startKey,omitempty"`
	EndKey   string `protobuf:"bytes,2,opt,name=endKey" json:"endKey,omitempty"`
}

func (m *GetStateByRange) Reset()                    { *m = GetStateByRange{} }
func (m *GetStateByRange) String() string            { return proto.CompactTextString(m) }
func (*GetStateByRange) ProtoMessage()               {}
func (*GetStateByRange) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{3} }

type GetQueryResult struct {
	Query string `protobuf:"bytes,1,opt,name=query" json:"query,omitempty"`
}

func (m *GetQueryResult) Reset()                    { *m = GetQueryResult{} }
func (m *GetQueryResult) String() string            { return proto.CompactTextString(m) }
func (*GetQueryResult) ProtoMessage()               {}
func (*GetQueryResult) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{4} }

type GetHistoryForKey struct {
	Key string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
}

func (m *GetHistoryForKey) Reset()                    { *m = GetHistoryForKey{} }
func (m *GetHistoryForKey) String() string            { return proto.CompactTextString(m) }
func (*GetHistoryForKey) ProtoMessage()               {}
func (*GetHistoryForKey) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{5} }

type QueryStateNext struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *QueryStateNext) Reset()                    { *m = QueryStateNext{} }
func (m *QueryStateNext) String() string            { return proto.CompactTextString(m) }
func (*QueryStateNext) ProtoMessage()               {}
func (*QueryStateNext) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{6} }

type QueryStateClose struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *QueryStateClose) Reset()                    { *m = QueryStateClose{} }
func (m *QueryStateClose) String() string            { return proto.CompactTextString(m) }
func (*QueryStateClose) ProtoMessage()               {}
func (*QueryStateClose) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{7} }

type QueryResultBytes struct {
	ResultBytes []byte `protobuf:"bytes,1,opt,name=resultBytes,proto3" json:"resultBytes,omitempty"`
}

func (m *QueryResultBytes) Reset()                    { *m = QueryResultBytes{} }
func (m *QueryResultBytes) String() string            { return proto.CompactTextString(m) }
func (*QueryResultBytes) ProtoMessage()               {}
func (*QueryResultBytes) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{8} }

type QueryResponse struct {
	Results []*QueryResultBytes `protobuf:"bytes,1,rep,name=results" json:"results,omitempty"`
	HasMore bool                `protobuf:"varint,2,opt,name=has_more,json=hasMore" json:"has_more,omitempty"`
	Id      string              `protobuf:"bytes,3,opt,name=id" json:"id,omitempty"`
}

func (m *QueryResponse) Reset()                    { *m = QueryResponse{} }
func (m *QueryResponse) String() string            { return proto.CompactTextString(m) }
func (*QueryResponse) ProtoMessage()               {}
func (*QueryResponse) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{9} }

func (m *QueryResponse) GetResults() []*QueryResultBytes {
	if m != nil {
		return m.Results
	}
	return nil
}

func init() {
	proto.RegisterType((*ChaincodeMessage)(nil), "protos.ChaincodeMessage")
	proto.RegisterType((*PutStateInfo)(nil), "protos.PutStateInfo")
	proto.RegisterType((*GetKStateByMultipleKeysResponse)(nil), "protos.GetKStateByMultipleKeysResponse")
	proto.RegisterType((*GetStateByRange)(nil), "protos.GetStateByRange")
	proto.RegisterType((*GetQueryResult)(nil), "protos.GetQueryResult")
	proto.RegisterType((*GetHistoryForKey)(nil), "protos.GetHistoryForKey")
	proto.RegisterType((*QueryStateNext)(nil), "protos.QueryStateNext")
	proto.RegisterType((*QueryStateClose)(nil), "protos.QueryStateClose")
	proto.RegisterType((*QueryResultBytes)(nil), "protos.QueryResultBytes")
	proto.RegisterType((*QueryResponse)(nil), "protos.QueryResponse")
	proto.RegisterEnum("protos.ChaincodeMessage_Type", ChaincodeMessage_Type_name, ChaincodeMessage_Type_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for ChaincodeSupport service

type ChaincodeSupportClient interface {
	Register(ctx context.Context, opts ...grpc.CallOption) (ChaincodeSupport_RegisterClient, error)
}

type chaincodeSupportClient struct {
	cc *grpc.ClientConn
}

func NewChaincodeSupportClient(cc *grpc.ClientConn) ChaincodeSupportClient {
	return &chaincodeSupportClient{cc}
}

func (c *chaincodeSupportClient) Register(ctx context.Context, opts ...grpc.CallOption) (ChaincodeSupport_RegisterClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_ChaincodeSupport_serviceDesc.Streams[0], c.cc, "/protos.ChaincodeSupport/Register", opts...)
	if err != nil {
		return nil, err
	}
	x := &chaincodeSupportRegisterClient{stream}
	return x, nil
}

type ChaincodeSupport_RegisterClient interface {
	Send(*ChaincodeMessage) error
	Recv() (*ChaincodeMessage, error)
	grpc.ClientStream
}

type chaincodeSupportRegisterClient struct {
	grpc.ClientStream
}

func (x *chaincodeSupportRegisterClient) Send(m *ChaincodeMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *chaincodeSupportRegisterClient) Recv() (*ChaincodeMessage, error) {
	m := new(ChaincodeMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for ChaincodeSupport service

type ChaincodeSupportServer interface {
	Register(ChaincodeSupport_RegisterServer) error
}

func RegisterChaincodeSupportServer(s *grpc.Server, srv ChaincodeSupportServer) {
	s.RegisterService(&_ChaincodeSupport_serviceDesc, srv)
}

func _ChaincodeSupport_Register_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ChaincodeSupportServer).Register(&chaincodeSupportRegisterServer{stream})
}

type ChaincodeSupport_RegisterServer interface {
	Send(*ChaincodeMessage) error
	Recv() (*ChaincodeMessage, error)
	grpc.ServerStream
}

type chaincodeSupportRegisterServer struct {
	grpc.ServerStream
}

func (x *chaincodeSupportRegisterServer) Send(m *ChaincodeMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *chaincodeSupportRegisterServer) Recv() (*ChaincodeMessage, error) {
	m := new(ChaincodeMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _ChaincodeSupport_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protos.ChaincodeSupport",
	HandlerType: (*ChaincodeSupportServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Register",
			Handler:       _ChaincodeSupport_Register_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: fileDescriptor3,
}

func init() { proto.RegisterFile("peer/chaincode_shim.proto", fileDescriptor3) }

var fileDescriptor3 = []byte{
	// 858 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x8c, 0x95, 0xed, 0x8e, 0xda, 0x46,
	0x17, 0xc7, 0x63, 0x5e, 0x76, 0xe1, 0xc0, 0xc2, 0x64, 0x36, 0xcf, 0x3e, 0x0e, 0x6a, 0x15, 0x6a,
	0x55, 0x15, 0xfd, 0x62, 0x5a, 0x5a, 0x45, 0x51, 0x55, 0xa9, 0x62, 0x61, 0x96, 0xb5, 0x00, 0x9b,
	0x8c, 0x4d, 0x14, 0xfa, 0x05, 0x79, 0x61, 0x16, 0xac, 0x00, 0xe3, 0x7a, 0x86, 0x28, 0xbe, 0x89,
	0xde, 0x4d, 0x2f, 0xaa, 0x77, 0x51, 0x8d, 0x8d, 0x59, 0x76, 0xa3, 0xa8, 0xfd, 0x84, 0xff, 0xe7,
	0xfc, 0xce, 0xff, 0x9c, 0x79, 0xd1, 0x00, 0x2f, 0x43, 0xc6, 0xa2, 0xf6, 0x62, 0xed, 0x07, 0xbb,
	0x05, 0x5f, 0xb2, 0xb9, 0x58, 0x07, 0x5b, 0x33, 0x8c, 0xb8, 0xe4, 0xf8, 0x2c, 0xf9, 0x11, 0x8d,
	0xc6, 0x13, 0x84, 0x7d, 0x64, 0x3b, 0x99, 0x32, 0x8d, 0xcb, 0x24, 0x17, 0x46, 0x3c, 0xe4, 0xc2,
	0xdf, 0x1c, 0x82, 0xaf, 0x56, 0x9c, 0xaf, 0x36, 0xac, 0x9d, 0xa8, 0xbb, 0xfd, 0x7d, 0x5b, 0x06,
	0x5b, 0x26, 0xa4, 0xbf, 0x0d, 0x53, 0xc0, 0xf8, 0xb3, 0x08, 0xa8, 0x97, 0xf9, 0x8d, 0x99, 0x10,
	0xfe, 0x8a, 0xe1, 0x1f, 0xa1, 0x20, 0xe3, 0x90, 0xe9, 0x5a, 0x53, 0x6b, 0xd5, 0x3a, 0x5f, 0xa7,
	0xa8, 0x30, 0x9f, 0x72, 0xa6, 0x17, 0x87, 0x8c, 0x26, 0x28, 0x7e, 0x03, 0xe5, 0xa3, 0xb5, 0x9e,
	0x6b, 0x6a, 0xad, 0x4a, 0xa7, 0x61, 0xa6, 0xcd, 0xcd, 0xac, 0xb9, 0xe9, 0x65, 0x04, 0x7d, 0x80,
	0xb1, 0x0e, 0xe7, 0xa1, 0x1f, 0x6f, 0xb8, 0xbf, 0xd4, 0xf3, 0x4d, 0xad, 0x55, 0xa5, 0x99, 0xc4,
	0x18, 0x0a, 0xf2, 0x53, 0xb0, 0xd4, 0x0b, 0x4d, 0xad, 0x55, 0xa6, 0xc9, 0x37, 0xee, 0x40, 0x29,
	0x5b, 0xa2, 0x5e, 0x4c, 0xda, 0x5c, 0x65, 0xe3, 0xb9, 0xc1, 0x6a, 0xc7, 0x96, 0x93, 0x43, 0x96,
	0x1e, 0x39, 0xfc, 0x1b, 0xd4, 0x9f, 0x6c, 0x99, 0x7e, 0xf6, 0xb8, 0xf4, 0xb8, 0x32, 0xa2, 0xb2,
	0xb4, 0xb6, 0x78, 0xa4, 0x8d, 0xbf, 0x73, 0x50, 0x50, 0x6b, 0xc5, 0x17, 0x50, 0x9e, 0xda, 0x7d,
	0x72, 0x63, 0xd9, 0xa4, 0x8f, 0x9e, 0xe1, 0x2a, 0x94, 0x28, 0x19, 0x58, 0xae, 0x47, 0x28, 0xd2,
	0x70, 0x0d, 0x20, 0x53, 0xa4, 0x8f, 0x72, 0xb8, 0x04, 0x05, 0xcb, 0xb6, 0x3c, 0x94, 0xc7, 0x65,
	0x28, 0x52, 0xd2, 0xed, 0xcf, 0x50, 0x01, 0xd7, 0xa1, 0xe2, 0xd1, 0xae, 0xed, 0x76, 0x7b, 0x9e,
	0xe5, 0xd8, 0xa8, 0xa8, 0x2c, 0x7b, 0xce, 0x78, 0x32, 0x22, 0x1e, 0xe9, 0xa3, 0x33, 0x85, 0x12,
	0x4a, 0x1d, 0x8a, 0xce, 0x55, 0x66, 0x40, 0xbc, 0xb9, 0xeb, 0x75, 0x3d, 0x82, 0x4a, 0x4a, 0x4e,
	0xa6, 0x99, 0x2c, 0x2b, 0xd9, 0x27, 0xa3, 0x83, 0x04, 0xfc, 0x02, 0x90, 0x65, 0xbf, 0x73, 0x86,
	0x64, 0xde, 0xbb, 0xed, 0x5a, 0x76, 0xcf, 0xe9, 0x13, 0x54, 0xc1, 0x4d, 0xf8, 0x4a, 0x59, 0x0c,
	0x53, 0x6c, 0x7e, 0x3d, 0x9b, 0x8f, 0xa7, 0x23, 0xcf, 0x9a, 0x8c, 0xc8, 0x7c, 0x48, 0x66, 0x2e,
	0xaa, 0xa6, 0x4b, 0x70, 0x27, 0x8e, 0xed, 0x12, 0x74, 0x81, 0xaf, 0x00, 0x1f, 0x5b, 0x2a, 0x9a,
	0x76, 0xed, 0x01, 0x41, 0x35, 0xe5, 0xae, 0xe2, 0x6f, 0xa7, 0x84, 0xce, 0xe6, 0x94, 0xb8, 0xd3,
	0x91, 0x87, 0xea, 0x2a, 0x9a, 0x46, 0x52, 0xde, 0x26, 0xef, 0x3d, 0x84, 0xf0, 0xff, 0xe0, 0xf9,
	0x69, 0xb4, 0x37, 0x72, 0x5c, 0x82, 0x9e, 0xab, 0x79, 0x87, 0x84, 0x4c, 0xba, 0x23, 0xeb, 0x1d,
	0x41, 0x18, 0xff, 0x1f, 0x2e, 0x95, 0xe3, 0xad, 0xe5, 0x7a, 0x0e, 0x9d, 0xcd, 0x6f, 0x1c, 0xaa,
	0x26, 0x42, 0x97, 0xc6, 0x6b, 0xa8, 0x4e, 0xf6, 0xd2, 0x95, 0xbe, 0x64, 0xd6, 0xee, 0x9e, 0x63,
	0x04, 0xf9, 0x0f, 0x2c, 0x4e, 0xae, 0x62, 0x99, 0xaa, 0x4f, 0xfc, 0x02, 0x8a, 0x1f, 0xfd, 0xcd,
	0x9e, 0x25, 0xd7, 0xac, 0x4a, 0x53, 0x61, 0xfc, 0xa5, 0xc1, 0xab, 0x01, 0x93, 0xc3, 0xa4, 0xf2,
	0x3a, 0x1e, 0xef, 0x37, 0x32, 0x08, 0x37, 0x6c, 0xc8, 0x62, 0x41, 0x99, 0x08, 0xf9, 0x4e, 0x30,
	0xec, 0x41, 0xf9, 0x03, 0x8b, 0x13, 0x42, 0xe8, 0x5a, 0x33, 0xdf, 0xaa, 0x74, 0x5e, 0x67, 0x57,
	0xe0, 0x5f, 0x6a, 0xcd, 0x61, 0x56, 0x48, 0x76, 0x32, 0x8a, 0xe9, 0x83, 0x51, 0xe3, 0x57, 0xa8,
	0x3d, 0x4e, 0xfe, 0xd7, 0x99, 0x7f, 0xc9, 0xbd, 0xd1, 0x0c, 0x02, 0xf5, 0x01, 0x93, 0x87, 0xce,
	0xd4, 0xdf, 0xad, 0x18, 0x6e, 0x40, 0x49, 0x48, 0x3f, 0x92, 0xc3, 0xa3, 0xc7, 0x51, 0xe3, 0x2b,
	0x38, 0x63, 0xbb, 0xa5, 0xca, 0xe4, 0x92, 0xcc, 0x41, 0x19, 0xdf, 0x41, 0x6d, 0xc0, 0xe4, 0xdb,
	0x3d, 0x8b, 0x62, 0xca, 0xc4, 0x7e, 0x23, 0x55, 0xcb, 0x3f, 0x94, 0x3c, 0x58, 0xa4, 0xc2, 0xf8,
	0x16, 0xd0, 0x80, 0xc9, 0xdb, 0x40, 0x48, 0x1e, 0xc5, 0x37, 0x3c, 0x52, 0x9e, 0x9f, 0x8d, 0x6b,
	0x34, 0xa1, 0x96, 0x58, 0x25, 0x63, 0xd9, 0xec, 0x93, 0xc4, 0x35, 0xc8, 0x05, 0xcb, 0x03, 0x92,
	0x0b, 0x96, 0xc6, 0x37, 0x50, 0x7f, 0x20, 0x7a, 0x1b, 0x2e, 0xd8, 0x67, 0xc8, 0xcf, 0x80, 0x4e,
	0xe6, 0xb9, 0x8e, 0x25, 0x13, 0xb8, 0x09, 0x95, 0xe8, 0x41, 0x26, 0x70, 0x95, 0x9e, 0x86, 0x8c,
	0x1d, 0x5c, 0x64, 0x55, 0xe9, 0xa1, 0x75, 0xe0, 0x3c, 0xcd, 0x67, 0x47, 0xa6, 0x67, 0x47, 0xf6,
	0xd4, 0x9d, 0x66, 0x20, 0x7e, 0x09, 0xa5, 0xb5, 0x2f, 0xe6, 0x5b, 0x1e, 0xa5, 0x3b, 0x5e, 0xa2,
	0xe7, 0x6b, 0x5f, 0x8c, 0x79, 0x94, 0x4d, 0x99, 0xcf, 0xa6, 0xec, 0xbc, 0x3f, 0x79, 0xff, 0xdc,
	0x7d, 0x18, 0xf2, 0x48, 0xe2, 0x3e, 0x94, 0x28, 0x5b, 0x05, 0x42, 0xb2, 0x08, 0xeb, 0x5f, 0x7a,
	0xfd, 0x1a, 0x5f, 0xcc, 0x18, 0xcf, 0x5a, 0xda, 0x0f, 0xda, 0xb5, 0x03, 0x06, 0x8f, 0x56, 0xe6,
	0x3a, 0x0e, 0x59, 0xb4, 0x61, 0xcb, 0x15, 0x8b, 0xcc, 0x7b, 0xff, 0x2e, 0x0a, 0x16, 0x59, 0x9d,
	0x7a, 0xb0, 0x7f, 0xff, 0x7e, 0x15, 0xc8, 0xf5, 0xfe, 0xce, 0x5c, 0xf0, 0x6d, 0xfb, 0x04, 0x6d,
	0xa7, 0x68, 0xfa, 0x70, 0x8b, 0xb6, 0x42, 0xef, 0xd2, 0x7f, 0x81, 0x9f, 0xfe, 0x09, 0x00, 0x00,
	0xff, 0xff, 0x10, 0xa5, 0x4e, 0x0c, 0x29, 0x06, 0x00, 0x00,
}
